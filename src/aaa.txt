// File: src/BarcodeScanner.jsx
import React, { useEffect, useRef, useState } from "react";
import { Html5QrcodeScanner, Html5QrcodeScanType } from "html5-qrcode";

const barcodeDatabase = {
  "8905693286233": {
    title: "Technosports T-Shirt",
    price: 499,
    description: "Breathable cotton sportswear for summer collection.",
  },
  "219143198693481": {
    title: "Prepaid Sample Box",
    price: 100,
    description: "Free sample order from Technosports. No payment required.",
  },
};

export default function Home() {
  const [items, setItems] = useState([]);
  const [errorMsg, setErrorMsg] = useState("");
  const lastScannedRef = useRef(null);

  useEffect(() => {
    const scanner = new Html5QrcodeScanner("reader", {
      fps: 10,
      qrbox: { width: 250, height: 250 },
      rememberLastUsedCamera: true,
      supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA],
    });

    scanner.render(
      (decodedText) => {
        if (decodedText !== lastScannedRef.current) {
          lastScannedRef.current = decodedText;
          const found = barcodeDatabase[decodedText];
          if (found) {
            setItems((prevItems) => {
              const index = prevItems.findIndex(item => item.code === decodedText);
              if (index !== -1) {
                const newItems = [...prevItems];
                newItems[index].quantity += 1;
                return newItems;
              } else {
                return [...prevItems, { ...found, code: decodedText, quantity: 1 }];
              }
            });
            setErrorMsg("");
          } else {
            setErrorMsg(`Barcode ${decodedText} not found in database.`);
          }

          // Prevent immediate duplicate scanning
          setTimeout(() => (lastScannedRef.current = null), 2000);
        }
      },
      (error) => {
        // Ignore scan errors
      }
    );

    return () => {
      scanner.clear().catch(console.error);
    };
  }, []);

  const totalAmount = items.reduce((sum, item) => sum + item.price * item.quantity, 0);

  return (
  <div className="min-h-screen bg-gradient-to-br from-gray-100 to-white p-4">
    <div className="max-w-4xl mx-auto bg-white p-8 rounded-2xl shadow-xl border border-gray-200">
      <h1 className="text-3xl font-extrabold text-center text-gray-800 mb-6">ðŸ“· Technosports Barcode Scanner</h1>

      <div className="flex justify-center mb-6">
        <div
          id="reader"
          className="w-full h-full max-w-lg aspect-square rounded-xl overflow-hidden border border-gray-300 shadow-md"
        />
      </div>

      {items.length > 0 ? (
        <div className="bg-white rounded-xl p-6 shadow border border-gray-200 font-mono text-sm">
          <div className="flex justify-between items-center border-b pb-4 mb-4">
            <div>
              <h2 className="text-xl font-bold text-gray-800">Technosports</h2>
              <p className="text-gray-500">GSTIN: 29ABCDE1234F1Z5</p>
              <p className="text-gray-500">support@technosports.in</p>
            </div>
            <div className="text-right">
              <p className="text-xs text-gray-500">Invoice Date:</p>
              <p className="font-semibold">{new Date().toLocaleDateString()}</p>
              <p className="text-xs text-gray-500">Invoice No:</p>
              <p className="font-semibold">TS-{Math.floor(Math.random() * 90000 + 10000)}</p>
            </div>
          </div>

          <div className="mb-4">
            <p><strong>Total Items:</strong> {items.length}</p>
            <p><strong>Shipment Type:</strong> COD</p>
          </div>

          <table className="w-full border-t border-b text-left mb-4">
            <thead>
              <tr className="text-gray-600">
                <th className="py-2">Item</th>
                <th className="py-2">Qty</th>
                <th className="py-2">Rate</th>
                <th className="py-2">Total</th>
              </tr>
            </thead>
            <tbody>
              {items.map((item, idx) => (
                <tr key={idx}>
                  <td className="py-2">{item.title}</td>
                  <td className="py-2">{item.quantity}</td>
                  <td className="py-2">â‚¹{item.price}</td>
                  <td className="py-2">â‚¹{item.price * item.quantity}</td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="text-right">
            <p className="text-lg font-semibold">
              Total Amount Due: <span className="text-green-700">â‚¹{totalAmount}</span>
            </p>
          </div>

          <div className="mt-6 text-xs text-gray-500 text-center border-t pt-4">
            This is a computer-generated invoice from Technosports.<br />
            No signature required.
          </div>
        </div>
      ) : errorMsg ? (
        <div className="p-4 rounded bg-red-100 text-red-800 text-center font-semibold">{errorMsg}</div>
      ) : (
        <p className="text-gray-500 text-center">Scan a barcode to generate an invoice</p>
      )}
    </div>
  </div>
);

}
